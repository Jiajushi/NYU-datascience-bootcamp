1) From df filter the 'Manufacturer', 'Model' and 'Type' for every 20th row starting from 1st (row 0).
df = pd.read_csv('https://raw.githubusercontent.com/selva86/datasets/master/Cars93_miss.csv')



import pandas as pd
import numpy as np


filter_df = df.iloc[::20][['Manufacturer', 'Model', 'Type']]
filter_df



2) Replace missing values in Min.Price and Max.Price columns with their respective mean (check documentation).
df = pd.read_csv('https://raw.githubusercontent.com/selva86/datasets/master/Cars93_miss.csv')

# Calculate the mean for 'Min.Price' and 'Max.Price'
min_price_mean = df['Min.Price'].mean()
max_price_mean = df['Max.Price'].mean()

# Replace missing values with the mean
df['Min.Price'] = df['Min.Price'].fillna(min_price_mean)
df['Max.Price'] = df['Max.Price'].fillna(max_price_mean)


3) How to get the rows of a dataframe with row sum > 100?
df = pd.DataFrame(np.random.randint(10, 40, 60).reshape(-1, 4))



# Calculate the sum of each row
row_sums = np.sum(df.to_numpy(), axis=1)
# Filter rows where the sum is greater than 100
filtered_df = df.loc[row_sums > 100]
filtered_df



4)Create a 4x4 NumPy array filled with random integers between 1 and 100. Then, reshape this array into two separate 2D arrays, where one represents the rows and the other represents the columns. 
Write a function, preferably using a lambda function, to calculate the sum of each row and each column separately, and return the results as two separate NumPy arrays


# Create a 4x4 NumPy array with random integers between 1 and 100
array_4x4 = np.random.randint(1, 101, size=(4, 4))

# Lambda functions to calculate the sum of each row and each column
sum_rows = lambda arr: np.sum(arr, axis=1)
sum_columns = lambda arr: np.sum(arr, axis=0)

# Calculate the sums
row_sums = sum_rows(array_4x4)
column_sums = sum_columns(array_4x4)

# Return the results
row_sums, column_sums
        










